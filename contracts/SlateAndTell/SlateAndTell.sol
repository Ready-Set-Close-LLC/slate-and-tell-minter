// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./ERC721Base.sol";
import "./PaymentSplitter.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract SlateAndTell is ERC721Base, PaymentSplitter {
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory uri,
        address[] memory _payees,
        uint256[] memory _shares
    ) ERC721("Slate And Tell", "SAT") PaymentSplitter(_payees, _shares) {
        _setContractURI(uri);

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    function mint(address to, string memory uri)
        external
        virtual
        onlyRole(MINTER_ROLE)
    {
        _safeMint(to);
        _setTokenURI(lastId(), uri);
    }
}
